{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"erlang exercise","name":"Ring","google":"","body":"### Ring Demo\r\n\r\nAn exercise from the Erlang Programming book. \r\n\r\nYou send a Message around N processes, M times around a ring so the start/3 function looks like this (per the books starting point)\r\n\r\n```\r\nstart(N, M, Messages)\r\n```\r\n\r\nEach process had to respond to a 'stop' message as well. There were two different way it suggested doing it. One was to have a master process that assembled the ring then sent the message down the ring the other was have each process spawn the next process until you reach N Processes. I chose the later. \r\n\r\nEach process is given the First PID that started the ring and N, and if N is greater than zero it then spawns another processing forwarding the First PID (not it self) and N - 1. When N = 0 the PID given to the main loop is the First Pid to complete the ring. \r\n\r\nWhen the First loop gets the message it sent it states the message made it around the ring. This determined by including the PID in the tuple structure that sent the initial message to be passed around. \r\n\r\nThe structure looks like\r\n\r\n```\r\n{From, forward, Msg}\r\n```"}